# name: Semgrep

# on:
#   # Scan changed files in PRs (diff-aware scanning):
#   pull_request: {}
#   # Scan on-demand through GitHub Actions interface:
#   workflow_dispatch: {}
#   # Scan mainline branches and report all findings:
#   push:

# jobs:
#   semgrep_scan:
#     # User definable name of this GitHub Actions job.
#     name: semgrep/ci
#     # If you are self-hosting, change the following `runs-on` value:
#     runs-on: ubuntu-latest
#     container:
#       # A Docker image with Semgrep installed. Do not change this.
#       image: returntocorp/semgrep
#     # Skip any PR created by dependabot to avoid permission issues:
#     if: (github.actor != 'dependabot[bot]')
#     permissions:
#       # required for all workflows
#       security-events: write
#       # only required for workflows in private repositories
#       actions: read
#       contents: read

#     steps:
#       # Fetch project source with GitHub Actions Checkout.
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Perform Semgrep Analysis
#       # @NOTE: This is the actual semgrep command to scan your code.
#       # Modify the --config option to 'r/all' to scan using all rules,
#       # or use multiple flags to specify particular rules, such as
#       # --config r/all --config custom/rules
#         run: semgrep --config auto --sarif --verbose . > semgrep-results.sarif

#       # upload the results for the CodeQL GitHub app to annotate the code
#       - name: Save SARIF results as artifact
#         uses: actions/upload-artifact@v3
#         with:
#           name: semgrep-scan-results
#           path: semgrep-results.sarif

#       # Upload SARIF file generated in previous step
#       - name: Upload SARIF result to the GitHub Security Dashboard
#         uses: github/codeql-action/upload-sarif@v2
#         with:
#           sarif_file: semgrep-results.sarif
#         if: always()
name: advocate workflow
on:
  push:
  pull_request:
  workflow_dispatch:
jobs:
  docker_image-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Setup Docker
        uses: docker/setup-buildx-action@v1
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      - name: TruffleHog
        uses: trufflesecurity/trufflehog@v3.76.1
      - name: Run Semgrep action
        uses: semgrep/semgrep-action@v1
        with:
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Upload Semgrep results
        uses: actions/upload-artifact@v2
        with:
          name: semgrep-results
          path: semgrep.sarif 
          
      - name: Build and analyze advocate
        env:
          GITHUB_TOKEN: ${{ secrets.GHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
        run: mvn -B -f backend/advocate/pom.xml verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=pucar_advocate -Dsonar.organization=pucar -Dsonar.host.url=https://sonarcloud.io/ -Dsonar.qualitygate.wait=true
      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        env:
          JAVA_HOME: /opt/jdk
        id: Depcheck
        with:
          project: 'advocate'
          path: 'backend/advocate'
          format: 'SARIF'    
          others: ''
      - name: Upload SARIF result to GitHub Security Dashboard
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/dependency-check-report.sarif
        if: always()
#      - name: Login to Azure Container Registry
#        if: github.ref == 'refs/heads/develop' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
#        run: docker login -u pucardev -p ${{ secrets.ACR_PASSWORD }} pucardev.azurecr.io
#
#      - name: Build and Push Docker image for advocate
#        if: github.ref == 'refs/heads/develop' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
#        run: |
#          docker build --build-arg WORK_DIR="backend/advocate" -t pucar_advocate:v1.0.0-${{ github.sha }} -f build/maven/Dockerfile .
#          docker tag pucar_advocate:v1.0.0-${{ github.sha }} pucardev.azurecr.io/pucar_advocate:v1.0.0-${{ github.sha }}
#          docker push pucardev.azurecr.io/pucar_advocate:v1.0.0-${{ github.sha }}
#
#      - name: Build and Push Docker image for advocate_DB
#        if: github.ref == 'refs/heads/develop' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
#        run: |
#          docker build -t pucar_advocate_db:v1.0.0-${{ github.sha }}  .
#          docker tag pucar_advocate_db:v1.0.0-${{ github.sha }} pucardev.azurecr.io/pucar_advocate_db:v1.0.0-${{ github.sha }}
#          docker push pucardev.azurecr.io/pucar_advocate_db:v1.0.0-${{ github.sha }}
#        working-directory: backend/advocate/src/main/resources/db
#      - name: Trigger Deployment Pipeline
#        if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
#        run: |
#          curl -X POST \
#          -H "Accept: application/vnd.github.v3+json" \
#          -H "Authorization: token ${{ secrets.GHUB_TOKEN }}" \
#          https://api.github.com/repos/pucardotorg/pucar-Devops/actions/workflows/dev.yaml/dispatches \
#          -d '{"ref":"Dev-0"}'
